<?php
/**
 * 应用程序设置类.
 */
class KissGoSetting implements ArrayAccess, IteratorAggregate {
	protected $setting_name = '';
	protected $settings = array ();
	private static $builtinApps = array ();
	private static $INSTANCE = array ();
	public function __construct($name) {
		$this->setting_name = $name;
	}
	/**
	 * 添加内置安装程序.
	 *
	 * @param string $appId
	 */
	public static function addBuiltinApp($appId) {
		if (! in_array ( $appId, self::$builtinApps )) {
			self::$builtinApps [] = $appId;
		}
	}
	/**
	 * 获取内置程序.
	 *
	 * @return array
	 */
	public static function getBuiltInApps() {
		return self::$builtinApps;
	}
	/**
	 * 取系统设置实例.
	 *
	 * @param string $name
	 * @param
	 *        	null|KissgoSetting
	 * @return KissGoSetting
	 */
	public static function getSetting($name = 'default', $setting = null) {
		if ($setting instanceof KissGoSetting) {
			self::$INSTANCE [$name] = $setting;
		} else if (! isset ( self::$INSTANCE [$name] ) || ! self::$INSTANCE [$name]) {
			if (isset ( self::$INSTANCE ['cluster'] ) && extension_loaded ( 'redis' ) && self::$INSTANCE ['cluster'] ['enabled']) {
				self::$INSTANCE [$name] = new KissGoClusterSetting ( $name );
			} else {
				self::$INSTANCE [$name] = new KissGoSetting ( $name );
			}
		}
		return self::$INSTANCE [$name];
	}
	public static function hasSetting($name) {
		return isset ( self::$INSTANCE [$name] );
	}
	/**
	 * 准备初始化设置.
	 */
	public static function prepareDefaultSetting() {
		$settings = KissGoSetting::getSetting ();
		if (isset ( $settings ['DEBUG'] )) {
			define ( 'DEBUG', intval ( $settings ['DEBUG'] ) );
		}
		if (isset ( $settings ['CLEAN_URL'] )) {
			define ( 'CLEAN_URL', ! empty ( $settings ['CLEAN_URL'] ) );
		} else {
			define ( 'CLEAN_URL', false );
		}
		if (isset ( $settings ['GZIP_ENABLED'] )) {
			define ( 'GZIP_ENABLED', ! empty ( $settings ['GZIP_ENABLED'] ) );
		} else {
			define ( 'GZIP_ENABLED', true );
		}
		if (isset ( $settings ['SECURITY_KEY'] ) && ! empty ( $settings ['SECURITY_KEY'] )) {
			define ( 'SECURITY_KEY', $settings ['SECURITY_KEY'] );
		} else {
			define ( 'SECURITY_KEY', md5 ( __FILE__ ) );
		}
		if (isset ( $settings ['site_url'] ) && ! empty ( $settings ['site_url'] )) {
			define ( 'BASE_URL', rtrim ( $settings ['site_url'], '/' ) . '/' );
		} else {
			define ( 'BASE_URL', self::detectBaseUrl () );
		}
		if (isset ( $settings ['TIMEZONE'] ) && ! empty ( $settings ['TIMEZONE'] )) {
			define ( 'TIMEZONE', $settings ['TIMEZONE'] );
		}
		if (isset ( $settings ['DEBUG_FIREPHP'] ) && ! empty ( $settings ['DEBUG_FIREPHP'] )) {
			define ( 'DEBUG_FIREPHP', $settings ['DEBUG_FIREPHP'] );
		}
	}
	/**
	 * 检测系统BASE URL.
	 *
	 * @return string
	 */
	public static function detectBaseUrl($full = false) {
		$script_name = $_SERVER ['SCRIPT_NAME'];
		$script_name = trim ( str_replace ( WEB_ROOT, '', $script_name ), '/' );
		$script_names = explode ( '/', $script_name );
		array_pop ( $script_names );
		$base = '/';
		if (! empty ( $script_names ) && ! is_file ( WEB_ROOT . $script_name )) {
			$web_roots = explode ( '/', trim ( str_replace ( DS, '/', WEB_ROOT ), '/' ) );
			$matchs = array ();
			$pos = 0;
			foreach ( $web_roots as $chunk ) {
				if ($chunk == $script_names [$pos]) {
					$matchs [] = $chunk;
					$pos ++;
				} else {
					$matchs = array ();
					$pos = 0;
				}
			}
			if ($pos > 0) {
				$base .= implode ( '/', $matchs ) . '/';
			}
		}
		if ($full) {
			$host = isset ( $_SERVER ['HTTP_HOST'] ) ? $_SERVER ['HTTP_HOST'] : 'localhost';
			$protocol = isset ( $_SERVER ['HTTPS'] ) ? 'https://' : 'http://';
			$base = $protocol . $host . $base;
		}
		return $base;
	}
	/**
	 * 将配置保存到文件.
	 *
	 * @param string $file
	 *        	保存到文件.
	 * @param string $setting
	 *        	要保存的配置。
	 */
	public function saveSettingToFile($filename) {
		$setting = $this->setting_name;
		$settings = $this->settings;
		$file = "<?php\n//generated by kissgo,don't edit this file manually!\ndefined('KISSGO') or exit('No direct script access allowed');\n";
		$file .= "\$settings = KissGoSetting::getSetting();\n\n";
		foreach ( $settings as $key => $value ) {
			if (is_array ( $value )) {
				$file .= "\$settings['$key'] = " . var_export ( $value, true ) . ";\n\n";
			} else if (is_numeric ( $value )) {
				$value = empty ( $value ) ? '0' : $value;
				$file .= "\$settings['$key'] = $value;\n\n";
			} else if (is_bool ( $value )) {
				$value = empty ( $value ) ? 'false' : 'true';
				$file .= "\$settings['$key'] = $value;\n\n";
			} else if (is_null ( $value )) {
				$file .= "\$settings['$key'] = null;\n\n";
			} else {
				$file .= "\$settings['$key'] = '{$value}';\n\n";
			}
		}
		$file .= "// end of $filename\n?>";
		$rst = @file_put_contents ( $filename, $file );
		if ($rst !== false && $rst > 0) {
			return true;
		}
		return '无法写入配置文件 [' . $filename . '] 请检查目录是否有可写权限.';
	}
	/**
	 * 取一个Redis实例.
	 *
	 * @param array $cnf
	 * @return Redis
	 */
	public static function getRedis($cnf, $database = 0, $prefix = '') {
		if (is_string ( $cnf )) {
			$cnf = array ($cnf,6379 );
		}
		if (count ( $cnf ) == 1) {
			$cnf [1] = 6379;
		}
		$redis = new Redis ();
		if (count ( $cnf ) > 2) {
			$rst = $redis->connect ( $cnf [0], $cnf [1], $cnf [2] );
		} else {
			$rst = $redis->connect ( $cnf [0], $cnf [1] );
		}
		if ($rst) {
			$redis->select ( $database );
			$redis->setOption ( Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP );
			if ($prefix) {
				$redis->setOption ( Redis::OPT_PREFIX, $prefix . ':' );
			}
			return $redis;
		} else {
			trigger_error ( 'Cannot connect the Redis Server:' . var_export ( $cnf, true ), E_USER_WARNING );
			return null;
		}
	}
	public function offsetExists($offset) {
		return isset ( $this->settings [$offset] );
	}
	public function offsetGet($offset) {
		return $this->get ( $offset, null );
	}
	public function offsetSet($offset, $value) {
		$this->set ( $offset, $value );
	}
	public function offsetUnset($offset) {
		unset ( $this->settings [$offset] );
	}
	/**
	 * 获取设置.
	 *
	 * @param string $name
	 * @param string $default
	 * @return string
	 */
	public function get($name, $default = '') {
		return isset ( $this->settings [$name] ) ? $this->settings [$name] : $default;
	}
	/**
	 * 设置.
	 *
	 * @param string $name
	 * @param mixed $value
	 */
	public function set($name, $value) {
		$this->settings [$name] = $value;
	}
	
	/*
	 * (non-PHPdoc) @see IteratorAggregate::getIterator()
	 */
	public function getIterator() {
		return new ArrayIterator ( $this->settings );
	}
	public function toArray() {
		return $this->settings;
	}
}

/**
 * 集群配置.
 *
 * @author 子明.
 *
 */
class KissGoClusterSetting extends KissGoSetting {
	private $redis;
	private $redisKey;
	private $clusterSettings = array ();
	public function __construct($name) {
		parent::__construct ( $name );
		$settings = KissGoSetting::getSetting ( 'cluster' );
		$cnf = $settings ['redis'];
		$db = $settings ['redisDB'];
		$this->redisKey = 'kis_setting@' . $name;
		$this->redis = KissGoSetting::getRedis ( $cnf, $db, $settings ['id'] );
		if ($this->redis) {
			$xdata = $this->redis->get ( $this->redisKey );
			if ($xdata) {
				$xdata = @unserialize ( $xdata );
				$this->clusterSettings = $xdata [0];
			}
		}
	}
	/*
	 * (non-PHPdoc) @see KissGoSetting::get()
	 */
	public function get($name, $default = '') {
		// get from loaded first
		if (isset ( $this->clusterSettings [$name] )) {
			return $this->clusterSettings [$name];
		}
		$value = parent::get ( $name, $default );
		$this->clusterSettings [$name] = $value;
		return $value;
	}
	public function set($name, $value) {
		$this->clusterSettings [$name] = $value;
		parent::set ( $name, $value );
	}
	/*
	 * (non-PHPdoc) @see KissGoSetting::offsetExists()
	 */
	public function offsetExists($offset) {
		if (isset ( $this->clusterSettings [$offset] )) {
			return true;
		}
		return parent::offsetExists ( $offset );
	}
	public function toArray() {
		foreach ( $this->clusterSettings as $key => $v ) {
			$this->settings [$key] = $v;
		}
		return $this->settings;
	}
	public function saveToRedis() {
		if ($this->redis) {
			if ($this->setting_name == 'default') {
				unset ( $this->settings ['database'] );
			}
			$xdata = array ($this->settings );
			$this->redis->set ( $this->redisKey, serialize ( $xdata ) );
			$this->redis->bgSave ();
			return true;
		}
		return '无法链接REDIS';
	}
	
	/*
	 * (non-PHPdoc) @see KissGoSetting::saveSettingToFile()
	 */
	public function saveSettingToFile($filename) {
		$rtn = parent::saveSettingToFile ( $filename );
		if ($rtn === true) {
			return $this->saveToRedis ();
		}
		return $rtn;
	}
}